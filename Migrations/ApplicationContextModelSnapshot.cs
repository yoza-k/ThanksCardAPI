// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThanksCardAPI.Models;

#nullable disable

namespace ThanksCardAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ThanksCardAPI.Models.Card", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<string>("CardBody")
                    .HasColumnType("text");

                b.Property<DateTime>("CardDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("CardTitle")
                    .HasColumnType("text");

                b.Property<long>("CategoryId")
                    .HasColumnType("bigint");

                b.Property<long>("SendId")
                    .HasColumnType("bigint");

                b.Property<long>("SenderId")
                    .HasColumnType("bigint");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("SendId");

                b.HasIndex("SenderId");

                b.ToTable("Cards");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Category", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("CategoryCd")
                    .HasColumnType("bigint");

                b.Property<string>("CategoryName")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Categories");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Comment", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("CardId")
                    .HasColumnType("bigint");

                b.Property<string>("CommentBody")
                    .HasColumnType("text");

                b.Property<string>("CommentTitle")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("CardId");

                b.ToTable("Comments");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Department", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("DepartmentCd")
                    .HasColumnType("bigint");

                b.Property<string>("DepartmentName")
                    .HasColumnType("text");

                b.Property<long?>("ParentId")
                    .HasColumnType("bigint");

                b.Property<int>("Permission")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("ParentId");

                b.ToTable("Departments");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Employee", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("DepartmentId")
                    .HasColumnType("bigint");

                b.Property<long>("EmployeeCd")
                    .HasColumnType("bigint");

                b.Property<string>("EmployeeName")
                    .HasColumnType("text");

                b.Property<string>("EmployeekanaName")
                    .HasColumnType("text");

                b.Property<long>("Pass")
                    .HasColumnType("bigint");

                b.HasKey("Id");

                b.HasIndex("DepartmentId");

                b.ToTable("Employees");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Good", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("CardId")
                    .HasColumnType("bigint");

                b.Property<long>("EmployeeId")
                    .HasColumnType("bigint");

                b.HasKey("Id");

                b.HasIndex("CardId");

                b.HasIndex("EmployeeId");

                b.ToTable("Goods");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Card", b =>
            {
                b.HasOne("ThanksCardAPI.Models.Category", "Category")
                    .WithMany("Cards")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ThanksCardAPI.Models.Employee", "Send")
                    .WithMany()
                    .HasForeignKey("SendId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ThanksCardAPI.Models.Employee", "Sender")
                    .WithMany()
                    .HasForeignKey("SenderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");

                b.Navigation("Send");

                b.Navigation("Sender");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Comment", b =>
            {
                b.HasOne("ThanksCardAPI.Models.Card", "Card")
                    .WithMany("Comments")
                    .HasForeignKey("CardId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Card");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Department", b =>
            {
                b.HasOne("ThanksCardAPI.Models.Department", "Parent")
                    .WithMany("Children")
                    .HasForeignKey("ParentId");

                b.Navigation("Parent");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Employee", b =>
            {
                b.HasOne("ThanksCardAPI.Models.Department", "Department")
                    .WithMany("Employees")
                    .HasForeignKey("DepartmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Department");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Good", b =>
            {
                b.HasOne("ThanksCardAPI.Models.Card", "Card")
                    .WithMany("Goods")
                    .HasForeignKey("CardId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ThanksCardAPI.Models.Employee", "Employee")
                    .WithMany()
                    .HasForeignKey("EmployeeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Card");

                b.Navigation("Employee");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Card", b =>
            {
                b.Navigation("Comments");

                b.Navigation("Goods");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Category", b =>
            {
                b.Navigation("Cards");
            });

            modelBuilder.Entity("ThanksCardAPI.Models.Department", b =>
            {
                b.Navigation("Children");

                b.Navigation("Employees");
            });
#pragma warning restore 612, 618
        }
    }
}
